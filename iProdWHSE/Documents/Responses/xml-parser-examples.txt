              "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
                "<Envelope" +
                    " xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"" +
                    " xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"" +
                    " xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">" +
                    "<soap:Body>" +
                        "<LoginResponse" +
                            " xmlns=\"http://schemas.microsoft.com/sharepoint/soap/\">" +
                            "<LoginResult>" +
                                "<CookieName>FedAuth</CookieName>" +
                                "<ErrorCode>NoError</ErrorCode>" +
                                "<TimeoutSeconds>1800</TimeoutSeconds>" +
                            "</LoginResult>" +
                        "</LoginResponse>" +
                    "</soap:Body>" +
                "</Envelope>";

            XDocument xml = XDocument.Parse(responseXml);
            var soapResponse = xml.Descendants().Where(x => x.Name.LocalName == "LoginResult").Select(x => new SoapResponse()
            {
                CookieName = (string)x.Element(x.Name.Namespace + "CookieName"),
                TimeoutSeconds = (int)x.Element(x.Name.Namespace + "TimeoutSeconds"),
                ErrorCode = (string)x.Element(x.Name.Namespace + "ErrorCode")
            }).FirstOrDefault();

---------- 2


 <?xml version="1.0" standalone="no"?>
        <SOAP-ENV:Envelope xmlns:SOAPSDK1="http://www.w3.org/2001/XMLSchema" xmlns:SOAPSDK2="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAPSDK3="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
        <SOAP-ENV:Body SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
            <SOAPSDK4:GetStoreProductsResponse xmlns:SOAPSDK4="http://www.externalwebservice.com/message/">
                <StoreProducts>
                    <StoreID></StoreID>
                    <Products></Products>
                </StoreProducts>
            </SOAPSDK4:GetStoreProductsResponse></SOAP-ENV:Body>
        </SOAP-ENV:Envelope>




--- 1 

var tstr = from result in tst.Descendants("StoreProducts") 
           select result.Element("Products").Value;

--- 2


     // read the raw request
        Request.InputStream.Seek(0, SeekOrigin.Begin);
        string xmlPayload = new StreamReader(Request.InputStream).ReadToEnd();
        XDocument doc = XDocument.Parse(xmlPayload);

        XNamespace xmlns = "urn:sobject.enterprise.soap.sforce.com";
        item.sfId = doc.Descendants(xmlns + "Id").First().Value;
        item.AccountId = doc.Descendants(xmlns + "AccountId").First().Value;
        item.FirstName = doc.Descendants(xmlns + "FirstName").First().Value;
        item.LastName = doc.Descendants(xmlns + "LastName").First().Value;
        item.XmlPayload = xmlPayload;



--------------------- 3

     XDocument doc = XDocument.Load(FILENAME);
            XElement root = doc.Root;
            XNamespace ns = root.GetDefaultNamespace();

            XElement firstItem = doc.Descendants(ns + "item").FirstOrDefault();

            Dictionary<string, string> dictItems = firstItem.Descendants(ns + "item")
                .GroupBy(x => (string)x.Element("key"), y => (string)y.Element("value"))
                .ToDictionary(x => x.Key, y => y.FirstOrDefault());


--------------- 4

public string GetXMLResponseValue()  
{  
    var serviceResult = string.Empty;  
    var xmlStr = @"<?xml version=""1.0"" encoding=""utf-8""?>    
    <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-   instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">    
     <soap:Body>                    
        <InitializeResponse  xmlns=""http://test.testtech.com/"">  
             <InitializeResult>TUJBIQBVHAXZE6H6PCQ0</InitializeResult>  
      </InitializeResponse >  
      </soap:Body>    
    </soap:Envelope>";  
    var doc = XDocument.Parse(xmlStr);  
    XNamespace ns = "http://test.testtech.com/";  
    var result = doc.Root.Descendants(ns + "InitializeResponse").Elements(ns + "InitializeResult").FirstOrDefault();  
    if (!String.IsNullOrEmpty(result.Value.ToString()))  
    {  
        serviceResult = result.Value.ToString();  
    }  
    return serviceResult;  
}  